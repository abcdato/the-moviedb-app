{"version":3,"sources":["components/MovieCard/MovieCard.jsx","api/MovieService.js","components/MovieList/MovieList.jsx","components/App/App.jsx","index.js"],"names":["MovieCard","title","releaseDate","overview","posterPath","date","format","Date","posterUrl","posterImg","className","src","alt","text","str","num","useWordBoundary","length","subString","substr","lastIndexOf","truncate","empty","description","defaultProps","MoviesAPI","key","url","tranformData","data","id","release_date","poster_path","query","a","fetch","this","res","json","movies","results","map","Error","MovieList","state","loading","error","loadData","setState","movieService","MovieService","getMovies","onError","movie","hasData","spinner","size","content","showData","errorMsg","message","type","showIcon","Component","App","app","React","createElement","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eaa21d65.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\nimport { Empty } from 'antd';\n\nimport './MovieCard.scss';\n\nconst MovieCard = ({ title, releaseDate, overview, posterPath }) => {\n  function truncate(str, num, useWordBoundary) {\n    if (str.length <= num) {\n      return str;\n    }\n    const subString = str.substr(0, num - 1);\n    return `${useWordBoundary ? subString.substr(0, subString.lastIndexOf(' ')) : subString} ...`;\n  }\n\n  const date = releaseDate ? format(new Date(releaseDate), 'MMMM Q, y') : null;\n  const posterUrl = `https://image.tmdb.org/t/p/w200/${posterPath}`;\n  const posterImg = <img className=\"card__poster\" src={posterUrl} alt=\"movies poster\" />;\n  const text = overview ? truncate(overview, 160, true) : null;\n  const empty = <Empty description=\"Image Not Found\" />;\n\n  return (\n    <li className=\"movie-card card\">\n      <div className=\"card__poster-wrapper\">{posterPath ? posterImg : empty}</div>\n      <div className=\"card__properties\">\n        <h3 className=\"card__title\">{title}</h3>\n        <div className=\"card__release-date\">{date}</div>\n        <div className=\"card__genres\">\n          <div className=\"card__genre\">action</div>\n          <div className=\"card__genre\">drama</div>\n        </div>\n        <p className=\"card__overview\">{text}</p>\n      </div>\n    </li>\n  );\n};\n\nMovieCard.defaultProps = {\n  posterPath: '',\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired,\n  posterPath: PropTypes.string,\n};\n\nexport default MovieCard;\n","class MoviesAPI {\n  key = '1be9a44c716204acb901eac3dee95b08';\n\n  url = 'https://api.themoviedb.org/3/search/movie';\n\n  async getMovies(query) {\n    try {\n      const res = await fetch(`${this.url}?api_key=${this.key}&query=${query}`);\n      const data = await res.json();\n      const movies = data.results.map(this.tranformData);\n\n      return movies;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  tranformData = (data) => ({\n    id: data.id,\n    title: data.title,\n    releaseDate: data.release_date,\n    overview: data.overview,\n    posterPath: data.poster_path,\n  });\n}\n\nexport default MoviesAPI;\n","import React, { Component } from 'react';\nimport { Alert, Spin } from 'antd';\nimport MovieCard from '../MovieCard/MovieCard';\n\nimport MovieService from '../../api/MovieService';\n\nimport './MovieList.scss';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n      error: false,\n    };\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  onError() {\n    this.setState({\n      loading: false,\n      error: true,\n    });\n  }\n\n  async loadData() {\n    try {\n      const movieService = new MovieService();\n      const data = await movieService.getMovies('return');\n\n      this.setState({\n        movies: data,\n        loading: false,\n        error: false,\n      });\n    } catch {\n      this.onError();\n    }\n  }\n\n  showData(data) {\n    return (\n      data &&\n      data.map((movie) => {\n        const { id, title, releaseDate, overview, posterPath } = movie;\n\n        return (\n          <MovieCard key={id} title={title} releaseDate={releaseDate} overview={overview} posterPath={posterPath} />\n        );\n      })\n    );\n  }\n\n  render() {\n    const { movies, loading, error } = this.state;\n\n    const hasData = !(loading || error);\n    const spinner = loading ? <Spin size=\"large\" /> : null;\n    const content = hasData ? this.showData(movies) : null;\n    const errorMsg = error ? (\n      <Alert message=\"Error\" description=\"Couldn't load the data.\" type=\"error\" showIcon />\n    ) : null;\n\n    return (\n      <ul className=\"movie-list\">\n        {spinner}\n        {errorMsg}\n        {content}\n      </ul>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport MovieList from '../MovieList/MovieList';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nconst app = React.createElement(App);\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}