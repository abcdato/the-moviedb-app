{"version":3,"sources":["components/MovieCard/MovieCard.jsx","api/MovieService.js","components/MovieList/MovieList.jsx","components/App/App.jsx","index.js"],"names":["MovieCard","title","releaseDate","overview","posterPath","date","format","Date","text","str","num","useWordBoundary","length","subString","substr","lastIndexOf","truncate","poster","className","src","alt","MoviesAPI","APIKey","url","query","a","fetch","this","res","json","data","movies","results","map","movie","id","release_date","poster_path","Error","MovieList","state","movieService","MovieService","getMovies","setState","Component","App","app","React","createElement","ReactDOM","render","document","getElementById"],"mappings":"mSA0CeA,EApCG,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WASjD,IAAMC,EAAOC,YAAO,IAAIC,KAAKL,GAAc,aACrCM,EATN,SAAkBC,EAAKC,EAAKC,GAC1B,GAAIF,EAAIG,QAAUF,EAChB,OAAOD,EAET,IAAMI,EAAYJ,EAAIK,OAAO,EAAGJ,EAAM,GACtC,MAAM,GAAN,OAAUC,EAAkBE,EAAUC,OAAO,EAAGD,EAAUE,YAAY,MAAQF,EAA9E,QAIWG,CAASb,EAAU,KAAK,GAC/Bc,EAAM,0CAAsCb,GAElD,OACE,sBAAKc,UAAU,kBAAf,UACE,qBAAKA,UAAU,eAAeC,IAAKF,EAAQG,IAAI,kBAC/C,sBAAKF,UAAU,mBAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BjB,IAC7B,qBAAKiB,UAAU,qBAAf,SAAqCb,IACrC,sBAAKa,UAAU,eAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,cAAf,sBAEF,mBAAGA,UAAU,iBAAb,SAA+BV,WC7BlBa,E,iDACnBC,OAAS,mC,KAETC,IAAM,4C,oFAEN,WAAgBC,GAAhB,mBAAAC,EAAA,+EAEsBC,MAAM,GAAD,OAAIC,KAAKJ,IAAT,oBAAwBI,KAAKL,OAA7B,kBAA6CE,IAFxE,cAEUI,EAFV,gBAGuBA,EAAIC,OAH3B,cAGUC,EAHV,OAIUC,EAASD,EAAKE,QAAQC,KAAI,SAACC,GAAD,MAAY,CAC1CC,GAAID,EAAMC,GACVlC,MAAOiC,EAAMjC,MACbC,YAAagC,EAAME,aACnBjC,SAAU+B,EAAM/B,SAChBC,WAAY8B,EAAMG,gBATxB,kBAYWN,GAZX,wCAcU,IAAIO,MAAJ,MAdV,0D,8DCEIC,G,wDACJ,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,OAAQ,IAJE,E,4FAQd,8BAAAN,EAAA,sEAEUgB,EAAe,IAAIC,EAF7B,SAGuBD,EAAaE,UAAU,UAH9C,OAGUb,EAHV,OAKIH,KAAKiB,SAAS,CAAEb,OAAQD,IAL5B,sDAOU,IAAIQ,MAAJ,MAPV,yD,0EAWA,WACE,IAEMR,EAFaH,KAAKa,MAAhBT,OAEYE,KAAI,SAACC,GACvB,IAAQC,EAAiDD,EAAjDC,GAAIlC,EAA6CiC,EAA7CjC,MAAOC,EAAsCgC,EAAtChC,YAAaC,EAAyB+B,EAAzB/B,SAAUC,EAAe8B,EAAf9B,WAE1C,OAAO,cAAC,EAAD,CAAoBH,MAAOA,EAAOC,YAAaA,EAAaC,SAAUA,EAAUC,WAAYA,GAA5E+B,MAGzB,OAAO,qBAAKjB,UAAU,aAAf,SAA6BY,Q,GA7BhBe,cAiCTN,I,MC3BAO,MARf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,cAAC,EAAD,OCJA6B,EAAMC,IAAMC,cAAcH,GAEhCI,IAASC,OAAOJ,EAAKK,SAASC,eAAe,W","file":"static/js/main.f2e9da5c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { format } from 'date-fns';\n\nimport './MovieCard.scss';\n\nconst MovieCard = ({ title, releaseDate, overview, posterPath }) => {\n  function truncate(str, num, useWordBoundary) {\n    if (str.length <= num) {\n      return str;\n    }\n    const subString = str.substr(0, num - 1);\n    return `${useWordBoundary ? subString.substr(0, subString.lastIndexOf(' ')) : subString} ...`;\n  }\n\n  const date = format(new Date(releaseDate), 'MMMM Q, y');\n  const text = truncate(overview, 160, true);\n  const poster = `https://image.tmdb.org/t/p/w200/${posterPath}`;\n\n  return (\n    <div className=\"movie-card card\">\n      <img className=\"card__poster\" src={poster} alt=\"movies poster\" />\n      <div className=\"card__properties\">\n        <h3 className=\"card__title\">{title}</h3>\n        <div className=\"card__release-date\">{date}</div>\n        <div className=\"card__genres\">\n          <div className=\"card__genre\">action</div>\n          <div className=\"card__genre\">drama</div>\n        </div>\n        <p className=\"card__overview\">{text}</p>\n      </div>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  releaseDate: PropTypes.string.isRequired,\n  overview: PropTypes.string.isRequired,\n  posterPath: PropTypes.string.isRequired,\n};\n\nexport default MovieCard;\n","export default class MoviesAPI {\n  APIKey = '1be9a44c716204acb901eac3dee95b08';\n\n  url = 'https://api.themoviedb.org/3/search/movie';\n\n  async getMovies(query) {\n    try {\n      const res = await fetch(`${this.url}?api_key=${this.APIKey}&query=${query}`);\n      const data = await res.json();\n      const movies = data.results.map((movie) => ({\n        id: movie.id,\n        title: movie.title,\n        releaseDate: movie.release_date,\n        overview: movie.overview,\n        posterPath: movie.poster_path,\n      }));\n\n      return movies;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport MovieCard from '../MovieCard/MovieCard';\n\nimport MovieService from '../../api/MovieService';\n\nimport './MovieList.scss';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const movieService = new MovieService();\n      const data = await movieService.getMovies('return');\n\n      this.setState({ movies: data });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    const data = movies.map((movie) => {\n      const { id, title, releaseDate, overview, posterPath } = movie;\n\n      return <MovieCard key={id} title={title} releaseDate={releaseDate} overview={overview} posterPath={posterPath} />;\n    });\n\n    return <div className=\"movie-list\">{data}</div>;\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport MovieList from '../MovieList/MovieList';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MovieList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nconst app = React.createElement(App);\n\nReactDOM.render(app, document.getElementById('root'));\n"],"sourceRoot":""}